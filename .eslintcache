[{"/Users/rameth/Documents/thunder-mall-store/src/view/signup.js":"1","/Users/rameth/Documents/thunder-mall-store/src/components/Dashboard.js":"2","/Users/rameth/Documents/thunder-mall-store/src/view/Payment/CardList.js":"3","/Users/rameth/Documents/thunder-mall-store/src/view/Products/index.js":"4","/Users/rameth/Documents/thunder-mall-store/src/view/Settings/Notifications.js":"5","/Users/rameth/Documents/thunder-mall-store/src/view/Category/index.js":"6","/Users/rameth/Documents/thunder-mall-store/src/view/Home/BannerSlider.js":"7","/Users/rameth/Documents/thunder-mall-store/src/fire.js":"8","/Users/rameth/Documents/thunder-mall-store/src/App.js":"9","/Users/rameth/Documents/thunder-mall-store/src/view/utility/confirmEmail.js":"10","/Users/rameth/Documents/thunder-mall-store/src/reportWebVitals.js":"11","/Users/rameth/Documents/thunder-mall-store/src/Auth.js":"12"},{"size":2796,"mtime":1615739893869,"results":"13","hashOfConfig":"14"},{"size":7361,"mtime":1616650886014,"results":"15","hashOfConfig":"14"},{"size":2322,"mtime":1610357373961,"results":"16","hashOfConfig":"14"},{"size":18701,"mtime":1616798014400,"results":"17","hashOfConfig":"14"},{"size":3106,"mtime":1610346961957,"results":"18","hashOfConfig":"14"},{"size":11487,"mtime":1616701224130,"results":"19","hashOfConfig":"14"},{"size":1538,"mtime":1610217116606,"results":"20","hashOfConfig":"14"},{"size":533,"mtime":1616682652603,"results":"21","hashOfConfig":"14"},{"size":1045,"mtime":1616623248478,"results":"22","hashOfConfig":"14"},{"size":608,"mtime":1615739739805,"results":"23","hashOfConfig":"14"},{"size":362,"mtime":1608035330522,"results":"24","hashOfConfig":"14"},{"size":684,"mtime":1616484573755,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"2mdrgz",{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/rameth/Documents/thunder-mall-store/src/view/signup.js",["52","53"],"/Users/rameth/Documents/thunder-mall-store/src/components/Dashboard.js",["54","55","56","57"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Home, CreditCard, Category, Settings, ShoppingCart, PowerSettingsNew, Store } from '@material-ui/icons';\nimport { Link } from 'react-router-dom' \nimport NavItem from './NavItem'\nimport HomeFragement from '../view/Home'\nimport MainCategory from '../view/Category/index'\nimport PaymentFragment from '../view/Payment/PaymentMethod'\nimport ProductsFragment from '../view/Products/index'\nimport OrdersFragment from '../view/Orders'\nimport SettingsFragement from '../view/Settings/index'\nimport fire from '../fire'\nimport { Avatar, Grid} from '@material-ui/core';\n\nconst drawerWidth = 180;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    backgroundColor: \"#ff5722\"\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 20,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(5) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(5.7) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 0),\n    height: theme.spacing(0),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nconst MiniDrawer = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(true);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const [fragment, setfragment] = useState(window.location.pathname)\n\n  const loadPageContent = () => {\n    switch (fragment) {\n      case \"Home\":\n        return <HomeFragement/>;\n      case \"/categories\":\n        return <MainCategory/>;\n      case \"Payments\":\n        return <PaymentFragment/>;\n      case \"/products\":\n        return <ProductsFragment/>;\n      case \"Orders\":\n        return <OrdersFragment/>;\n      case \"Settings\":\n        return <SettingsFragement/>;\n      default:\n        return <HomeFragement/>;\n    }\n  }\n\n  const LogOut = ()=> {\n    fire.auth().signOut();\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n \n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Grid item xs={6}>\n              <IconButton\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n                onClick={handleDrawerOpen}\n                edge=\"start\"\n                className={clsx(classes.menuButton, {\n                  [classes.hide]: open,\n                })}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" noWrap>\n                Product Management\n              </Typography>\n            </Grid>\n            <Grid item xs={6} align=\"right\" justify=\"middle\">\n              <Avatar alt=\"profile\" />\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <NavItem \n            href=\"/\"\n            key={1}\n            title=\"Home\"\n            icon={Home}\n            style={{marginLeft: \"6px\"}}\n            onClick={e=>setfragment(\"Home\")}>\n          </NavItem>\n          <NavItem \n            href=\"/categories\"\n            key={2}\n            title=\"Category\"\n            icon={Category}\n            style={{marginLeft: \"6px\"}}\n            onClick={e=>setfragment(\"/categories\")}>\n          </NavItem>\n          <NavItem \n            href=\"/products\"\n            key={3}\n            title=\"Products\"\n            icon={Store}\n            style={{marginLeft: \"6px\"}}\n            onClick={e=>setfragment(\"/products\")}>\n          </NavItem>\n          <NavItem \n            href=\"/\"\n            key={4}\n            title=\"Orders\"\n            icon={ShoppingCart}\n            style={{marginLeft: \"6px\"}}\n            onClick={e=>setfragment(\"Orders\")}>\n          </NavItem>\n          <NavItem \n            href=\"/\"\n            key={5}\n            title=\"Payments\"\n            icon={CreditCard}\n            style={{marginLeft: \"6px\"}}\n            onClick={e=>setfragment(\"Payments\")}>\n          </NavItem>\n          <NavItem \n            href=\"/\"\n            key={6}\n            title=\"Settings\"\n            icon={Settings}\n            style={{marginLeft: \"6px\"}}\n            onClick={e=>setfragment(\"Settings\")}>\n          </NavItem>\n        </List>\n        <Divider/>\n        <NavItem \n            href=\"/\"\n            title=\"Logout\"\n            icon={PowerSettingsNew}\n            style={{marginLeft: \"6px\"}}\n            onClick={e=>LogOut()}>\n          </NavItem>\n        <Divider/>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n          <div>\n            {loadPageContent()}\n          </div>\n      </main>\n    </div>\n  );\n}\n\nexport default MiniDrawer","/Users/rameth/Documents/thunder-mall-store/src/view/Payment/CardList.js",["58"],"/Users/rameth/Documents/thunder-mall-store/src/view/Products/index.js",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"import React, { useEffect, useState } from 'react';\nimport fire from '../../fire';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Autocomplete } from '@material-ui/lab';\nimport {\n  Typography,\n  IconButton,\n  Grid,\n  Button,\n  DialogTitle,\n  DialogContentText,\n  DialogContent,\n  DialogActions,\n  Dialog,\n  Avatar\n} from '@material-ui/core';\n\nimport { Create, Delete, Search, Add } from '@material-ui/icons';\nimport { store } from 'react-notifications-component';\nimport { Link } from 'react-router-dom'\n\nconst columns = [\n  { id: 'code', label: 'Product Code' },\n  { id: 'name', label: 'Product Name' },\n  { id: 'quantity', label: 'Quantity(QTY)' },\n  { id: 'category', label: 'Category(Type)' },\n  { id: 'price', label: 'Price(US Dollar)' },\n  { id: 'totalSell', label: 'Total Sell(P-QTY)' },\n  { id: 'picture', label: 'Picture(Cover)' },\n  { id: 'action', label: 'Action' }\n];\n\nconst rows = [];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  }\n});\nconst statusItems = ['Active', 'Inactive']\nexport default function Category(productCategory) {\n  const [value, setValue] = useState();\n  const [inputValue, setInputValue] = useState('');\n\n  const [products, setProducts] = useState([])\n  const [categories, setCategories] = useState([])\n  const [open, setOpen] = useState(false);\n  const [categoryInfo, setCategoryInfo] = useState({code: '', name: '', picture: ''});\n  const [toggleCreateDialog, setToggleCreateDialog] = useState(false);\n  const [fileUrl, setFileUrl] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [isEdit, setIsEdit] = useState(false);\n  const [cateCode, setCateCode] = useState(null);\n  const [imageFile, setImageFile] = useState(null);\n  const [isImageChange, setIsImageChange] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [dialogTitle, setDialogTitle] = useState(null);\n  const [buttonTitle, setButtonTitle] = useState(null);\n\n  const [code, setCode] = useState('');\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [discount, setDiscount] = useState('');\n  const [totalSell, setTotalSell] = useState('');\n  const [price, setPrice] = useState('');\n  const [model, setModel] = useState('');\n  const [branch, setBranch] = useState('');\n  const [status, setStatus] = useState('');\n  const [picture, setPicture] = useState('');\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      const db = fire.firestore();\n      const data = await db\n      .collection('products')\n      .orderBy('code')\n      .limit(rowsPerPage)\n      .startAt(page)\n      .get();  \n      const products = data.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setProducts(products);\n      // console.log(products, 'here is loading data');\n    } \n    fetchProducts();\n  }, [productCategory,products])\n  \n  const fetchCateogries = async () => {\n    const db = fire.firestore();\n    const data = await db\n    .collection(\"categories\")\n    .get()\n    .then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        let {name} = doc.data();\n          categories.push(name)\n      })\n    });\n  } \n\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n    alert(newPage, 'start at page')\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  //delete function\n  const handleDeleteDialog = (id) => {\n    setOpen(true);\n    setCategoryInfo(id);\n    console.log(id)\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleDelete = () => {\n    try {\n      const db = fire.firestore();\n      db.collection(\"products\").doc(categoryInfo.id).delete().then(() => {\n        setOpen(false);\n      }).catch((error) => {\n        alert(error)\n      });\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const setupDialogTitle = () => {\n    if(!isEdit) {\n      setDialogTitle('Create New Productl');\n      setButtonTitle('Create');\n    } else {\n      setDialogTitle('Update Product');\n      setButtonTitle('Update');\n    }\n  }\n  //Create function \n  const handleCreateDialog = () => {\n    fetchCateogries()\n    setupDialogTitle();\n    setIsEdit(false)\n    setToggleCreateDialog(true);\n    setCode('')\n    setName('')\n    setDescription('');\n    setCategory('')\n    setQuantity('');\n    setDiscount('');\n    setPrice('');\n    setBranch('');\n    setModel('');\n    setStatus('');\n    setPicture('')\n  };\n  const handleEditDialog = (cate) => {\n    console.log(cate)\n    setupDialogTitle();\n    setIsEdit(true);\n    setToggleCreateDialog(true);\n    setCode(cate.code);\n    setName(cate.name);\n    setCateCode(cate.code);\n    setDescription(cate.description);\n    setCategory(cate.category)\n    setQuantity(cate.quantity);\n    setDiscount(cate.discount);\n    setPrice(cate.price);\n    setBranch(cate.branch);\n    setModel(cate.model);\n    setStatus(cate.status);\n    setPicture(cate.picture)\n  };\n\n  const closeCreateDialog = () => {\n    setToggleCreateDialog(false);\n  };\n  const handleCreateNewCategory = async (e) => {\n    e.preventDefault();\n    try {     \n      if (!isEdit) {\n        onRequestCreateProduct()\n      } else {\n        onRequestUpdateProduct()\n      }\n      setToggleCreateDialog(false);\n\n    } catch (err) {\n      console.log(err, 'cannot create or update')\n    }\n  }\n\n  const onRequestCreateProduct = async () => {\n    const db = fire.firestore();\n    const storageRef = fire.storage().ref();\n    const fileRef = storageRef.child(imageFile.name);\n    await fileRef.put(imageFile)\n        await fileRef.getDownloadURL().then((url) => {\n          db.collection(\"products\").doc(code).set({\n            code: code,\n            name: name,\n            description: description,\n            category: category,\n            quantity: quantity,\n            discount: discount,\n            totalSell: totalSell,\n            price: price,\n            branch: branch,\n            model: model,\n            status: status,\n            createdBy: 'Admin',\n            createdAt: '',\n            updatedBy: '',\n            updatedAt: '',\n            picture: url\n          })\n        })\n  }\n\n  const onRequestUpdateProduct = async () => {\n    const db = fire.firestore();\n    const storageRef = fire.storage().ref();\n    if(isImageChange) {\n      const fileRef = storageRef.child(imageFile.name);\n      await fileRef.put(imageFile);\n      await fileRef.getDownloadURL().then((url) => {\n        db.collection(\"products\").doc(cateCode).update({\n          code: code,\n          name: name,\n          description: description,\n          category: category,\n          quantity: quantity,\n          discount: discount,\n          totalSell: totalSell,\n          price: price,\n          branch: branch,\n          model: model,\n          status: status,\n          createdBy: 'Admin',\n          createdAt: db.Timestamp,\n          updatedBy: '',\n          updatedAt: db.Timestamp,\n          picture: url\n        })\n      })\n    } else {\n      db.collection(\"products\").doc(cateCode).update({\n        code: code,\n        name: name,\n        description: description,\n        category: category,\n        quantity: quantity,\n        discount: discount,\n        totalSell: totalSell,\n        price: price,\n        branch: branch,\n        model: model,\n        status: status,\n        createdBy: 'Admin',\n        createdAt: db.Timestamp,\n        updatedBy: '',\n        updatedAt: db.Timestamp,\n        picture: picture  \n      })\n    }\n    \n  }\n\n  const onImageChange = (e) => {\n    var file = e.target.files[0];\n    var reader = new FileReader();\n    var url = reader.readAsDataURL(file);\n    setImageFile(file);\n\n    reader.onloadend = function (e) {\n      setPreviewImage([reader.result]);\n    };\n  console.log(url)\n    setIsImageChange(true);\n  }\n\n\n  return (\n    <Paper style={{ padding: '20px' }}>\n      <Typography variant=\"h4\">\n        Product\n      </Typography>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={6}>\n        <Grid container>\n        <Grid item xs={4}>\n          <Autocomplete\n            id=\"combo-box\"\n            options={categories}\n            getOptionLabel={(option) => option}\n            style={{marginTop: 16}}\n            renderInput={(params) => <TextField {...params} label=\"Categegory\" variant=\"outlined\" size=\"small\" />}\n          />\n        </Grid>\n        <Grid item xs={4}>\n            <TextField\n              label=\"Search...\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"status\"\n              type=\"text\"\n              style={{marginLeft: 16}}\n            />\n        </Grid>\n        <Grid item xs={4}>\n          <Button color=\"primary\" variant=\"contained\" style={{marginTop: 18, marginLeft: 32}}>\n            <Search />\n          </Button>\n        </Grid>\n            </Grid>\n        </Grid>\n        <Grid item xs={6} align=\"right\" justify=\"middle\">\n          <Button variant=\"contained\" color=\"primary\" onClick={handleCreateDialog}>\n            <Add /> Create\n          </Button>\n        </Grid>\n      </Grid>\n      <TableContainer className={classes.container} style={{ maxHeight: \"70%\"}}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {products.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((cate) => {\n              return (\n                <TableRow hover tabIndex={-1} key={cate.id} style={{ height: '10px' }}>\n                  <TableCell>{cate.code}</TableCell>\n                  <TableCell>{cate.name}</TableCell>\n                  <TableCell>{cate.category}</TableCell>\n                  <TableCell>{cate.quantity}</TableCell>\n                  <TableCell>{cate.price}</TableCell>\n                  <TableCell>{cate.totalSell || 0}</TableCell>\n                  <TableCell style={{ width: '200px' }}>\n                    <img alt=\"icons\" src={cate.picture} style={{ width: '30px', height: '30px' }} />\n                  </TableCell>\n                  <TableCell style={{ margin: 0, padding: 0, width: \"100px\" }}>\n                    <IconButton color=\"primary\" onClick={e=>handleEditDialog(cate)}>\n                      <Create />\n                    </IconButton>\n                    <IconButton color=\"primary\" onClick={e => handleDeleteDialog(cate)}>\n                      <Delete />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={products.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Confirmation\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete this category {categoryInfo.code}?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n            </Button>\n          <Button onClick={handleDelete} color=\"primary\" variant=\"contained\" autoFocus pending={true}>\n            Confirm\n            </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        open={toggleCreateDialog}\n        onClose={closeCreateDialog}\n        fullWidth\n        maxWidth=\"sm\"\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle style={{paddingBottom: 0}}>{dialogTitle}</DialogTitle>\n        <form onSubmit={handleCreateNewCategory}>\n          <DialogContent style={{paddingTop: 0}}>\n            <Grid container justify=\"space-around\" spacing={4}>\n              <Grid item xs={6}>\n                  <TextField\n                  label=\"Code\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"code\"\n                  type=\"text\" \n                  value={code}\n                  onChange={(e) => setCode(e.target.value)}\n                />\n                <TextField\n                  label=\"Name\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                />\n                <TextField\n                  label=\"Description\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"description\"\n                  type=\"text\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                />\n                {/* <TextField\n                  label=\"Category\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"cateogry\"\n                  type=\"text\"\n                  value={category}\n                  onChange={(e) => setCategory(e.target.value)}\n                /> */}\n              <Autocomplete\n                value={category}\n                onChange={(event, newValue) => {\n                  setCategory(newValue);\n                }}\n                inputValue={inputValue}\n                onInputChange={(event, newInputValue) => {\n                  setInputValue(newInputValue);\n                }}\n                options={categories}\n                style={{ marginTop: 16 }}\n                renderInput={(params) => <TextField {...params} label=\"Category\" variant=\"outlined\" size=\"small\"/>}\n              />\n              </Grid>\n              <Grid item xs={6}>\n\n            <TextField\n              label=\"Quantity\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"quantity\"\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <TextField\n              label=\"Discount\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"discouont\"\n              type=\"text\"\n              value={discount}\n              onChange={(e) => setDiscount(e.target.value)}\n            />\n            <TextField\n              label=\"Price\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"price\"\n              type=\"text\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n            />\n            <TextField\n              label=\"Branch\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"branch\"\n              type=\"text\"\n              value={branch}\n              onChange={(e) => setBranch(e.target.value)}\n            />\n            <TextField\n              label=\"Model\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"model\"\n              type=\"text\"\n              value={model}\n              onChange={(e) => setModel(e.target.value)}\n            />\n            <TextField\n              label=\"Status\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"status\"\n              type=\"text\"\n              value={status}\n              onChange={(e) => setStatus(e.target.value)}\n            />\n              </Grid>\n            </Grid>\n           \n            <input\n              style={{ display: \"none\" }}\n              id=\"contained-button-file\"\n              type=\"file\"\n              onChange={onImageChange}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button variant=\"contained\" color=\"primary\" component=\"span\" style={{marginTop: 10}}>\n                Upload Image\n              </Button>\n            </label> <br/>\n            <img alt=\"IMAGE\" style={{width: 100, height:100, marginLeft: 20}} src={isImageChange ? previewImage : picture}/>\n          </DialogContent>\n          <DialogActions> \n            <Button onClick={closeCreateDialog} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\" variant=\"contained\" autoFocus>\n              {buttonTitle}\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </Paper>\n  );\n}\n","/Users/rameth/Documents/thunder-mall-store/src/view/Settings/Notifications.js",[],"/Users/rameth/Documents/thunder-mall-store/src/view/Category/index.js",["75","76","77","78","79","80","81","82","83","84"],"/Users/rameth/Documents/thunder-mall-store/src/view/Home/BannerSlider.js",["85","86","87","88","89","90","91"],"/Users/rameth/Documents/thunder-mall-store/src/fire.js",[],"/Users/rameth/Documents/thunder-mall-store/src/App.js",[],"/Users/rameth/Documents/thunder-mall-store/src/view/utility/confirmEmail.js",[],"/Users/rameth/Documents/thunder-mall-store/src/reportWebVitals.js",[],"/Users/rameth/Documents/thunder-mall-store/src/Auth.js",["92"],{"ruleId":"93","severity":1,"message":"94","line":14,"column":11,"nodeType":"95","messageId":"96","endLine":14,"endColumn":22},{"ruleId":"97","severity":1,"message":"98","line":33,"column":8,"nodeType":"99","endLine":33,"endColumn":17,"suggestions":"100"},{"ruleId":"93","severity":1,"message":"101","line":15,"column":8,"nodeType":"95","messageId":"96","endLine":15,"endColumn":16},{"ruleId":"93","severity":1,"message":"102","line":16,"column":8,"nodeType":"95","messageId":"96","endLine":16,"endColumn":20},{"ruleId":"93","severity":1,"message":"103","line":17,"column":8,"nodeType":"95","messageId":"96","endLine":17,"endColumn":20},{"ruleId":"93","severity":1,"message":"104","line":19,"column":10,"nodeType":"95","messageId":"96","endLine":19,"endColumn":14},{"ruleId":"93","severity":1,"message":"105","line":3,"column":10,"nodeType":"95","messageId":"96","endLine":3,"endColumn":16},{"ruleId":"93","severity":1,"message":"106","line":25,"column":3,"nodeType":"95","messageId":"96","endLine":25,"endColumn":9},{"ruleId":"93","severity":1,"message":"107","line":29,"column":10,"nodeType":"95","messageId":"96","endLine":29,"endColumn":15},{"ruleId":"93","severity":1,"message":"104","line":30,"column":10,"nodeType":"95","messageId":"96","endLine":30,"endColumn":14},{"ruleId":"93","severity":1,"message":"108","line":43,"column":7,"nodeType":"95","messageId":"96","endLine":43,"endColumn":11},{"ruleId":"93","severity":1,"message":"109","line":53,"column":7,"nodeType":"95","messageId":"96","endLine":53,"endColumn":18},{"ruleId":"93","severity":1,"message":"110","line":55,"column":10,"nodeType":"95","messageId":"96","endLine":55,"endColumn":15},{"ruleId":"93","severity":1,"message":"111","line":55,"column":17,"nodeType":"95","messageId":"96","endLine":55,"endColumn":25},{"ruleId":"93","severity":1,"message":"112","line":59,"column":22,"nodeType":"95","messageId":"96","endLine":59,"endColumn":35},{"ruleId":"93","severity":1,"message":"113","line":63,"column":10,"nodeType":"95","messageId":"96","endLine":63,"endColumn":17},{"ruleId":"93","severity":1,"message":"114","line":63,"column":19,"nodeType":"95","messageId":"96","endLine":63,"endColumn":29},{"ruleId":"93","severity":1,"message":"115","line":64,"column":10,"nodeType":"95","messageId":"96","endLine":64,"endColumn":17},{"ruleId":"93","severity":1,"message":"116","line":64,"column":19,"nodeType":"95","messageId":"96","endLine":64,"endColumn":29},{"ruleId":"93","severity":1,"message":"117","line":79,"column":21,"nodeType":"95","messageId":"96","endLine":79,"endColumn":33},{"ruleId":"97","severity":1,"message":"118","line":103,"column":6,"nodeType":"99","endLine":103,"endColumn":32,"suggestions":"119"},{"ruleId":"93","severity":1,"message":"120","line":107,"column":11,"nodeType":"95","messageId":"96","endLine":107,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":590,"column":13,"nodeType":"123","endLine":590,"endColumn":125},{"ruleId":"93","severity":1,"message":"106","line":25,"column":3,"nodeType":"95","messageId":"96","endLine":25,"endColumn":9},{"ruleId":"93","severity":1,"message":"124","line":28,"column":26,"nodeType":"95","messageId":"96","endLine":28,"endColumn":31},{"ruleId":"93","severity":1,"message":"107","line":29,"column":10,"nodeType":"95","messageId":"96","endLine":29,"endColumn":15},{"ruleId":"93","severity":1,"message":"104","line":30,"column":10,"nodeType":"95","messageId":"96","endLine":30,"endColumn":14},{"ruleId":"93","severity":1,"message":"108","line":39,"column":7,"nodeType":"95","messageId":"96","endLine":39,"endColumn":11},{"ruleId":"93","severity":1,"message":"113","line":55,"column":10,"nodeType":"95","messageId":"96","endLine":55,"endColumn":17},{"ruleId":"93","severity":1,"message":"114","line":55,"column":19,"nodeType":"95","messageId":"96","endLine":55,"endColumn":29},{"ruleId":"93","severity":1,"message":"125","line":56,"column":10,"nodeType":"95","messageId":"96","endLine":56,"endColumn":21},{"ruleId":"97","severity":1,"message":"118","line":89,"column":6,"nodeType":"99","endLine":89,"endColumn":27,"suggestions":"126"},{"ruleId":"121","severity":1,"message":"122","line":362,"column":13,"nodeType":"123","endLine":362,"endColumn":125},{"ruleId":"93","severity":1,"message":"127","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":20},{"ruleId":"93","severity":1,"message":"128","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":21},{"ruleId":"93","severity":1,"message":"129","line":4,"column":8,"nodeType":"95","messageId":"96","endLine":4,"endColumn":13},{"ruleId":"93","severity":1,"message":"130","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":18},{"ruleId":"93","severity":1,"message":"105","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":14},{"ruleId":"93","severity":1,"message":"131","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":25},{"ruleId":"93","severity":1,"message":"132","line":8,"column":8,"nodeType":"95","messageId":"96","endLine":8,"endColumn":26},{"ruleId":"93","severity":1,"message":"133","line":9,"column":10,"nodeType":"95","messageId":"96","endLine":9,"endColumn":18},"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'userData.emailVerified'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'Avatar' is defined but never used.","'store' is defined but never used.","'rows' is assigned a value but never used.","'statusItems' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'setCategories' is assigned a value but never used.","'fileUrl' is assigned a value but never used.","'setFileUrl' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setTotalSell' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'page' and 'rowsPerPage'. Either include them or remove the dependency array.",["135"],"'data' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Image' is defined but never used.","'loadingData' is assigned a value but never used.",["136"],"'makeStyles' is defined but never used.","'MobileStepper' is defined but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'KeyboardArrowLeft' is defined but never used.","'KeyboardArrowRight' is defined but never used.","'userData' is assigned a value but never used.",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [history, userData.emailVerified]",{"range":"143","text":"144"},"Update the dependencies array to be: [page, productCategory, products, rowsPerPage]",{"range":"145","text":"146"},"Update the dependencies array to be: [category, categories, rowsPerPage, page]",{"range":"147","text":"148"},[971,980],"[history, userData.emailVerified]",[3474,3500],"[page, productCategory, products, rowsPerPage]",[2802,2823],"[category, categories, rowsPerPage, page]"]