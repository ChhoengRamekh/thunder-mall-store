[{"/Users/rameth/Documents/thunder-mall-store/src/view/signup.js":"1","/Users/rameth/Documents/thunder-mall-store/src/components/Dashboard.js":"2","/Users/rameth/Documents/thunder-mall-store/src/view/Payment/CardList.js":"3","/Users/rameth/Documents/thunder-mall-store/src/view/Products/index.js":"4","/Users/rameth/Documents/thunder-mall-store/src/view/Settings/Notifications.js":"5","/Users/rameth/Documents/thunder-mall-store/src/view/Category/index.js":"6","/Users/rameth/Documents/thunder-mall-store/src/view/Home/BannerSlider.js":"7","/Users/rameth/Documents/thunder-mall-store/src/fire.js":"8","/Users/rameth/Documents/thunder-mall-store/src/App.js":"9","/Users/rameth/Documents/thunder-mall-store/src/view/utility/confirmEmail.js":"10","/Users/rameth/Documents/thunder-mall-store/src/reportWebVitals.js":"11","/Users/rameth/Documents/thunder-mall-store/src/Auth.js":"12","/Users/rameth/Documents/thunder-mall-store/src/view/login.js":"13","/Users/rameth/Documents/thunder-mall-store/src/view/Orders/index.js":"14","/Users/rameth/Documents/thunder-mall-store/src/view/Settings/index.js":"15","/Users/rameth/Documents/thunder-mall-store/src/components/NavItem.js":"16"},{"size":2796,"mtime":1615739893869,"results":"17","hashOfConfig":"18"},{"size":7112,"mtime":1616873462031,"results":"19","hashOfConfig":"18"},{"size":2322,"mtime":1610357373961,"results":"20","hashOfConfig":"18"},{"size":18849,"mtime":1616873307492,"results":"21","hashOfConfig":"18"},{"size":3106,"mtime":1610346961957,"results":"22","hashOfConfig":"18"},{"size":11716,"mtime":1616858177334,"results":"23","hashOfConfig":"18"},{"size":1538,"mtime":1610217116606,"results":"24","hashOfConfig":"18"},{"size":533,"mtime":1616682652603,"results":"25","hashOfConfig":"18"},{"size":1173,"mtime":1616873327893,"results":"26","hashOfConfig":"18"},{"size":608,"mtime":1615739739805,"results":"27","hashOfConfig":"18"},{"size":362,"mtime":1608035330522,"results":"28","hashOfConfig":"18"},{"size":684,"mtime":1616484573755,"results":"29","hashOfConfig":"18"},{"size":2705,"mtime":1616565978755,"results":"30","hashOfConfig":"18"},{"size":11721,"mtime":1616872574970,"results":"31","hashOfConfig":"18"},{"size":631,"mtime":1610347412839,"results":"32","hashOfConfig":"18"},{"size":1653,"mtime":1616873656549,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"2mdrgz",{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rameth/Documents/thunder-mall-store/src/view/signup.js",["68","69"],"/Users/rameth/Documents/thunder-mall-store/src/components/Dashboard.js",["70","71","72","73","74","75"],"/Users/rameth/Documents/thunder-mall-store/src/view/Payment/CardList.js",["76"],"/Users/rameth/Documents/thunder-mall-store/src/view/Products/index.js",["77","78","79","80","81","82","83","84","85","86","87","88","89"],"/Users/rameth/Documents/thunder-mall-store/src/view/Settings/Notifications.js",[],"/Users/rameth/Documents/thunder-mall-store/src/view/Category/index.js",["90","91","92","93","94","95","96","97","98","99"],"import React, { useEffect, useState } from 'react';\nimport fire from '../../fire';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Autocomplete } from '@material-ui/lab';\nimport {\n  Typography,\n  IconButton,\n  Grid,\n  Button,\n  DialogTitle,\n  DialogContentText,\n  DialogContent,\n  DialogActions,\n  Dialog,\n  Avatar\n} from '@material-ui/core';\n\nimport { Create, Delete, Search, Add } from '@material-ui/icons';\nimport { store } from 'react-notifications-component';\nimport { Link } from 'react-router-dom'\n\nconst columns = [\n  { id: 'code', label: 'Category Code' },\n  { id: 'name', label: 'Category Name' },\n  { id: 'picture', label: 'Picture(Cover)' },\n  { id: 'action', label: 'Action' }\n];\n\nconst rows = [];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  }\n});\n\nexport default function Category(category) {\n  const [categories, setCategories] = useState([])\n  const [open, setOpen] = useState(false);\n  const [categoryInfo, setCategoryInfo] = useState({code: '', name: '', picture: ''});\n  const [toggleCreateDialog, setToggleCreateDialog] = useState(false);\n  const [fileUrl, setFileUrl] = useState(null);\n  const [loadingData, setLoadingData] = useState(false);\n  const [loading, setLoading] = useState(null);\n  const [isEdit, setIsEdit] = useState(false);\n  const [cateCode, setCateCode] = useState(null);\n  const [imageFile, setImageFile] = useState(null);\n  const [isImageChange, setIsImageChange] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [dialogTitle, setDialogTitle] = useState(null);\n  const [buttonTitle, setButtonTitle] = useState(null);\n\n  const [name, setName] = useState('');\n  const [code, setCode] = useState('');\n  const [picture, setPicture] = useState('');\n\n  useEffect(() => {\n    const fetchCateogries = async () => {\n      setLoadingData(true)\n      const db = fire.firestore();\n      const data = await db\n      .collection('categories')\n      .orderBy('code')\n      .limit(rowsPerPage)\n      .startAt(page)\n      .get();  \n      const categories = data.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setCategories(categories);\n      setLoadingData(false)\n      // console.log(categories, 'here is loading data');\n    } \n    fetchCateogries();\n  }, [category,categories])\n\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n    alert(newPage, 'start at page')\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n\n  //delete function\n  const handleDeleteDialog = (id) => {\n    setOpen(true);\n    setCategoryInfo(id);\n    console.log(id)\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleDelete = () => {\n    try {\n      const db = fire.firestore();\n      db.collection(\"categories\").doc(categoryInfo.id).delete().then(() => {\n        setOpen(false);\n      }).catch((error) => {\n        alert(error)\n      });\n    } catch (err) {\n      console.log(err)\n    }\n  }\n  const setupDialogTitle = () => {\n    if(!isEdit) {\n      setDialogTitle('Create New Productl');\n      setButtonTitle('Create');\n    } else {\n      setDialogTitle('Update Product');\n      setButtonTitle('Update');\n    }\n  }\n  //Create function \n  const handleCreateDialog = () => {\n    setupDialogTitle()\n    setCode('')\n    setName('')\n    setPicture('')\n    setIsEdit(false)\n    setToggleCreateDialog(true);\n  };\n  const handleEditDialog = (cate) => {\n    setupDialogTitle()\n    setIsEdit(true)\n    setToggleCreateDialog(true);\n    setCode(cate.code)\n    setName(cate.name)\n    setCateCode(cate.id);\n    setPicture(cate.picture)\n  };\n\n  const closeCreateDialog = () => {\n    setToggleCreateDialog(false);\n  };\n  const handleCreateNewCategory = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      if (!isEdit) {\n        requestCreateCategory()\n      } else {\n        requestUpdateCategory()\n      }\n      setLoading(false);\n      setToggleCreateDialog(false);\n\n    } catch (err) {\n      console.log(err, 'cannot create or update')\n    }\n  }\n  const requestCreateCategory = async () => {\n    const db = fire.firestore();\n    const storageRef = fire.storage().ref();\n    const fileRef = storageRef.child(imageFile.name);\n    await fileRef.put(imageFile)\n    await fileRef.getDownloadURL().then((url) => {\n      db.collection(\"categories\").doc(code).set({\n        code: code,\n        name: name,\n        picture: url\n      })\n    })\n  }\n  const requestUpdateCategory = async () => {\n    const db = fire.firestore();\n    const storageRef = fire.storage().ref();\n    if(isImageChange) {\n      const fileRef = storageRef.child(imageFile.name);\n      await fileRef.put(imageFile);\n      await fileRef.getDownloadURL().then((url) => {\n        db.collection(\"categories\").doc(cateCode).update({\n          code: code,\n          name: name,\n          picture: url\n        })\n      })\n    } else {\n      db.collection(\"categories\").doc(cateCode).update({\n        code: code,\n        name: name,\n        picture: picture\n      })\n    }\n  }\n\n  const onImageChange = (e) => {\n    var file = e.target.files[0];\n    var reader = new FileReader();\n    var url = reader.readAsDataURL(file);\n    setImageFile(file);\n\n    reader.onloadend = function (e) {\n      setPreviewImage([reader.result]);\n    };\n  console.log(url)\n    setIsImageChange(true);\n  }\n\n\n  return (\n    <Paper style={{ padding: '20px' }}>\n      <Typography variant=\"h4\">\n        Product Category\n      </Typography>\n      <Grid container justify=\"center\">\n      <Grid item xs={6}>\n        <Grid container>\n        <Grid item xs={6}>\n            <TextField\n              label=\"Search...\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"status\"\n              type=\"text\"\n              style={{marginLeft: 16}}\n            />\n        </Grid>\n        <Grid item xs={4}>\n          <Button color=\"primary\" variant=\"contained\" style={{marginTop: 18, marginLeft: 32}}>\n            <Search />\n          </Button>\n        </Grid>\n            </Grid>\n        </Grid>\n        <Grid item xs={6} align=\"right\">\n          <Button variant=\"contained\" color=\"primary\" onClick={handleCreateDialog}>\n            <Add /> Create\n          </Button>\n        </Grid>\n      </Grid>\n      <TableContainer className={classes.container} style={{ maxHeight: \"70%\"}} loading={loading}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {categories.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((cate) => {\n              return (\n                <TableRow hover tabIndex={-1} key={cate.id} style={{ height: '10px' }}>\n                  <TableCell>{cate.code}</TableCell>\n                  <TableCell>{cate.name}</TableCell>\n                  <TableCell style={{ width: '400px' }}>\n                    <img alt=\"icons\" src={cate.picture} style={{ width: '30px', height: '30px' }} />\n                  </TableCell>\n                  <TableCell style={{ margin: 0, padding: 0, width: \"200px\" }}>\n                    <IconButton color=\"primary\" onClick={e=>handleEditDialog(cate)}>\n                      <Create />\n                    </IconButton>\n                    <IconButton color=\"primary\" onClick={e => handleDeleteDialog(cate)}>\n                      <Delete />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={categories.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Confirmation\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete this category {categoryInfo.code}?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n            </Button>\n          <Button onClick={handleDelete} color=\"primary\" variant=\"contained\" autoFocus pending={true}>\n            Confirm\n            </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        open={toggleCreateDialog}\n        onClose={closeCreateDialog}\n        fullWidth\n        maxWidth=\"sm\"\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle style={{paddingBottom: 0}}>{dialogTitle}</DialogTitle>\n        <form onSubmit={handleCreateNewCategory}>\n          <DialogContent style={{paddingTop: 0}}>\n            <TextField\n              label=\"code\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"code\"\n              type=\"text\" \n              value={code}\n              onChange={(e) => setCode(e.target.value)}\n            />\n            <TextField\n              label=\"name\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"name\"\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n            <input\n              style={{ display: \"none\" }}\n              id=\"contained-button-file\"\n              type=\"file\"\n              onChange={onImageChange}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button variant=\"contained\" color=\"primary\" component=\"span\" style={{marginTop: 10}}>\n                Upload Image\n              </Button>\n            </label> <br/>\n            <img alt=\"IMAGE\" style={{width: 100, height:100, marginLeft: 20}} src={isImageChange ? previewImage : picture}/>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={closeCreateDialog} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\" variant=\"contained\" autoFocus loading={loading}>\n              {buttonTitle}\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </Paper>\n  );\n}\n","/Users/rameth/Documents/thunder-mall-store/src/view/Home/BannerSlider.js",["100","101","102","103","104","105","106"],"/Users/rameth/Documents/thunder-mall-store/src/fire.js",[],"/Users/rameth/Documents/thunder-mall-store/src/App.js",[],"/Users/rameth/Documents/thunder-mall-store/src/view/utility/confirmEmail.js",[],"/Users/rameth/Documents/thunder-mall-store/src/reportWebVitals.js",[],"/Users/rameth/Documents/thunder-mall-store/src/Auth.js",["107"],"/Users/rameth/Documents/thunder-mall-store/src/view/login.js",["108"],"/Users/rameth/Documents/thunder-mall-store/src/view/Orders/index.js",["109","110","111","112","113","114","115","116","117","118","119","120","121","122"],"import React, { useEffect, useState } from 'react';\nimport fire from '../../fire';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Autocomplete } from '@material-ui/lab';\nimport {\n  Typography,\n  IconButton,\n  Grid,\n  Button,\n  DialogTitle,\n  DialogContentText,\n  DialogContent,\n  DialogActions,\n  Dialog,\n  Avatar\n} from '@material-ui/core';\n\nimport { Create, Delete, Search, Add } from '@material-ui/icons';\nimport { store } from 'react-notifications-component';\nimport { Link } from 'react-router-dom'\nimport NumberFormat from 'react-number-format';\n\nconst columns = [\n  { id: 'code', label: 'Orders Code' },\n  { id: 'customerId', label: 'Customer ID' },\n  { id: 'name', label: 'Customer Name' },\n  { id: 'price', label: 'Phone Number' },\n  { id: 'Email', label: 'Email' },\n  { id: 'address', label: 'Delivery Address' },\n  { id: 'quantity', label: 'Total Price' },\n  { id: 'status', label: 'Status' }\n];\n\nconst rows = [];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  }\n});\nconst product = [{ code: 'TBBB', name: 'Iphone', price: 233, quantity: 1, picture: 'https://firebasestorage.googleapis.com/v0/b/thunder-mall-2400e.appspot.com/o/1936732220.png?alt=media&token=ccec8cf5-08bc-4bad-85bb-69aa742ef897' }]\nexport default function Category(productCategory) {\n  const [open, setDialogOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const [orders, setOrders] = useState([])\n  const [categories, setCategories] = useState([])\n  const [products, setProducts] = useState([])\n  const [productDetail, setProductDetail] = useState([])\n\n  useEffect(() => {\n    const fetchorders = async () => {\n      const db = fire.firestore();\n      const data = await db\n        .collection('orders')\n        .orderBy('orderId')\n        .limit(rowsPerPage)\n        .startAt(page)\n        .get();\n      const orders = data.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setOrders(orders);\n    }\n    fetchorders();\n  }, [productCategory, orders])\n\n  const fetchProductOrder = async (items) => {\n    const db = fire.firestore();\n    const data = await db\n      .collection(\"orders\")\n      .doc(items.orderId)\n      .collection('products')\n      .get();\n\n    const products = data.docs.map(doc => ({\n      ...doc.data()\n    }));\n    setProducts(products);\n    console.log(products, 'here is last');\n  }\n\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleClose = () => {\n    setDialogOpen(false);\n    setProducts([]);\n  };\n\n  const totalAmountToPay = (items) => {\n    return items.map(({ price }) => price).reduce((sum, i) => sum + i, 0);\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const handleShowProductOrder = (items) => {\n    fetchProductOrder(items)\n    setProductDetail(items)\n    console.log(productDetail, 'here  is product detail')\n    setDialogOpen(true)\n  }\n\n  return (\n    <Paper style={{ padding: '20px' }}>\n      <Typography variant=\"h4\">\n        List of Orders\n      </Typography>\n      <Grid container>\n        <Grid item xs={6}>\n          <Grid container>\n            <Grid item xs={4}>\n              <Autocomplete\n                id=\"combo-box\"\n                options={categories}\n                getOptionLabel={(option) => option}\n                style={{ marginTop: 16 }}\n                renderInput={(params) => <TextField {...params} label=\"Categegory\" variant=\"outlined\" size=\"small\" />}\n              />\n            </Grid>\n            <Grid item xs={5}>\n              <TextField\n                label=\"Search...\"\n                id=\"outlined-size-small\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                size=\"small\"\n                name=\"status\"\n                type=\"text\"\n                style={{ marginLeft: 16 }}\n              />\n            </Grid>\n            <Grid item xs={2}>\n              <Button color=\"primary\" variant=\"contained\" style={{ marginTop: 18, marginLeft: 32 }}>\n                <Search />\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <TableContainer className={classes.container} style={{ maxHeight: \"70%\" }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {orders.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((cate) => {\n              return (\n                <TableRow hover tabIndex={-1} key={cate.id} style={{ height: '10px' }}>\n                  <TableCell>\n                    <button\n                      style={{ color: 'blue', border: 'none', outline: 'none', background: 'none' }}\n                      onClick={(e) => handleShowProductOrder(cate)}\n                    >{cate.orderId}</button>\n                  </TableCell>\n                  <TableCell>{cate.customerId}</TableCell>\n                  <TableCell>{cate.name}</TableCell>\n                  <TableCell>{cate.phone}</TableCell>\n                  <TableCell>{cate.email || 'No Email'}</TableCell>\n                  <TableCell>{cate.address}</TableCell>\n                  <TableCell>\n                    <NumberFormat\n                      value={cate.totalToPay}\n                      decimalScale={2}\n                      fixedDecimalScale={true}\n                      displayType={'text'}\n                      thousandSeparator={true} prefix={'$'}\n                    />\n                  </TableCell>\n                  <TableCell>{cate.status}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={orders.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        fullWidth={100}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Product Ordered\"}</DialogTitle>\n        <DialogContent>\n          <Grid container>\n            <Grid item xs={6}>\n              <span>Order ID</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.orderId}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Customer ID</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.customerId}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Customer Name</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.name}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Phone Number</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.phone}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Email</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.email}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Delivery Address</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.address}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Total Price</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.totalToPay}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Delivery Status</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.status}</span>\n            </Grid>\n          </Grid>\n\n            <TableContainer component={Paper} style={{marginTop: 16}}>\n              <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Code</TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Price</TableCell>\n                    <TableCell>Quantity</TableCell>\n                    <TableCell>Picture</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {products.map((row) => (\n                    <TableRow key={row.code}>\n                      <TableCell>{row.code}</TableCell>\n                      <TableCell>{row.name}</TableCell>\n                      <TableCell>\n                        <NumberFormat\n                          value={row.price}\n                          decimalScale={2}\n                          fixedDecimalScale={true}\n                          displayType={'text'}\n                          thousandSeparator={true} prefix={'$'}\n                        />\n                      </TableCell>\n                      <TableCell>{row.quantity}</TableCell>\n                      <TableCell>\n                        <img alt=\"icons\" src={row.picture} style={{ width: '30px', height: '30px' }} />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  <TableRow>\n                    <TableCell rowSpan={3} />\n                    <TableCell colSpan={2}>Subtotal</TableCell>\n                    <TableCell align=\"right\">\n                      <NumberFormat\n                        value={totalAmountToPay(products)}\n                        decimalScale={2}\n                        fixedDecimalScale={true}\n                        displayType={'text'}\n                        thousandSeparator={true} prefix={'$'}\n                      />\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n            </Button>\n        </DialogActions>\n      </Dialog>\n    </Paper>\n  );\n}\n","/Users/rameth/Documents/thunder-mall-store/src/view/Settings/index.js",["123"],"/Users/rameth/Documents/thunder-mall-store/src/components/NavItem.js",[],{"ruleId":"124","severity":1,"message":"125","line":14,"column":11,"nodeType":"126","messageId":"127","endLine":14,"endColumn":22},{"ruleId":"128","severity":1,"message":"129","line":33,"column":8,"nodeType":"130","endLine":33,"endColumn":17,"suggestions":"131"},{"ruleId":"124","severity":1,"message":"132","line":15,"column":8,"nodeType":"126","messageId":"127","endLine":15,"endColumn":16},{"ruleId":"124","severity":1,"message":"133","line":16,"column":8,"nodeType":"126","messageId":"127","endLine":16,"endColumn":20},{"ruleId":"124","severity":1,"message":"134","line":17,"column":8,"nodeType":"126","messageId":"127","endLine":17,"endColumn":20},{"ruleId":"124","severity":1,"message":"135","line":18,"column":16,"nodeType":"126","messageId":"127","endLine":18,"endColumn":26},{"ruleId":"124","severity":1,"message":"136","line":19,"column":10,"nodeType":"126","messageId":"127","endLine":19,"endColumn":14},{"ruleId":"124","severity":1,"message":"137","line":23,"column":8,"nodeType":"126","messageId":"127","endLine":23,"endColumn":23},{"ruleId":"124","severity":1,"message":"138","line":3,"column":10,"nodeType":"126","messageId":"127","endLine":3,"endColumn":16},{"ruleId":"124","severity":1,"message":"139","line":25,"column":3,"nodeType":"126","messageId":"127","endLine":25,"endColumn":9},{"ruleId":"124","severity":1,"message":"140","line":29,"column":10,"nodeType":"126","messageId":"127","endLine":29,"endColumn":15},{"ruleId":"124","severity":1,"message":"136","line":30,"column":10,"nodeType":"126","messageId":"127","endLine":30,"endColumn":14},{"ruleId":"124","severity":1,"message":"141","line":45,"column":7,"nodeType":"126","messageId":"127","endLine":45,"endColumn":11},{"ruleId":"124","severity":1,"message":"142","line":61,"column":22,"nodeType":"126","messageId":"127","endLine":61,"endColumn":35},{"ruleId":"124","severity":1,"message":"143","line":65,"column":10,"nodeType":"126","messageId":"127","endLine":65,"endColumn":17},{"ruleId":"124","severity":1,"message":"144","line":65,"column":19,"nodeType":"126","messageId":"127","endLine":65,"endColumn":29},{"ruleId":"124","severity":1,"message":"145","line":66,"column":10,"nodeType":"126","messageId":"127","endLine":66,"endColumn":17},{"ruleId":"124","severity":1,"message":"146","line":66,"column":19,"nodeType":"126","messageId":"127","endLine":66,"endColumn":29},{"ruleId":"124","severity":1,"message":"147","line":81,"column":21,"nodeType":"126","messageId":"127","endLine":81,"endColumn":33},{"ruleId":"128","severity":1,"message":"148","line":105,"column":6,"nodeType":"130","endLine":105,"endColumn":32,"suggestions":"149"},{"ruleId":"124","severity":1,"message":"150","line":109,"column":11,"nodeType":"126","messageId":"127","endLine":109,"endColumn":15},{"ruleId":"151","severity":1,"message":"152","line":511,"column":13,"nodeType":"153","endLine":511,"endColumn":125},{"ruleId":"124","severity":1,"message":"154","line":14,"column":10,"nodeType":"126","messageId":"127","endLine":14,"endColumn":22},{"ruleId":"124","severity":1,"message":"139","line":25,"column":3,"nodeType":"126","messageId":"127","endLine":25,"endColumn":9},{"ruleId":"124","severity":1,"message":"140","line":29,"column":10,"nodeType":"126","messageId":"127","endLine":29,"endColumn":15},{"ruleId":"124","severity":1,"message":"136","line":30,"column":10,"nodeType":"126","messageId":"127","endLine":30,"endColumn":14},{"ruleId":"124","severity":1,"message":"141","line":39,"column":7,"nodeType":"126","messageId":"127","endLine":39,"endColumn":11},{"ruleId":"124","severity":1,"message":"143","line":55,"column":10,"nodeType":"126","messageId":"127","endLine":55,"endColumn":17},{"ruleId":"124","severity":1,"message":"144","line":55,"column":19,"nodeType":"126","messageId":"127","endLine":55,"endColumn":29},{"ruleId":"124","severity":1,"message":"155","line":56,"column":10,"nodeType":"126","messageId":"127","endLine":56,"endColumn":21},{"ruleId":"128","severity":1,"message":"148","line":89,"column":6,"nodeType":"130","endLine":89,"endColumn":27,"suggestions":"156"},{"ruleId":"151","severity":1,"message":"152","line":375,"column":13,"nodeType":"153","endLine":375,"endColumn":125},{"ruleId":"124","severity":1,"message":"157","line":2,"column":10,"nodeType":"126","messageId":"127","endLine":2,"endColumn":20},{"ruleId":"124","severity":1,"message":"158","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":21},{"ruleId":"124","severity":1,"message":"159","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":13},{"ruleId":"124","severity":1,"message":"160","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":18},{"ruleId":"124","severity":1,"message":"138","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":14},{"ruleId":"124","severity":1,"message":"161","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":25},{"ruleId":"124","severity":1,"message":"162","line":8,"column":8,"nodeType":"126","messageId":"127","endLine":8,"endColumn":26},{"ruleId":"124","severity":1,"message":"163","line":9,"column":10,"nodeType":"126","messageId":"127","endLine":9,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":33,"column":5,"nodeType":"130","endLine":33,"endColumn":14,"suggestions":"164"},{"ruleId":"124","severity":1,"message":"165","line":17,"column":3,"nodeType":"126","messageId":"127","endLine":17,"endColumn":13},{"ruleId":"124","severity":1,"message":"166","line":21,"column":3,"nodeType":"126","messageId":"127","endLine":21,"endColumn":20},{"ruleId":"124","severity":1,"message":"139","line":25,"column":3,"nodeType":"126","messageId":"127","endLine":25,"endColumn":9},{"ruleId":"124","severity":1,"message":"167","line":28,"column":10,"nodeType":"126","messageId":"127","endLine":28,"endColumn":16},{"ruleId":"124","severity":1,"message":"168","line":28,"column":18,"nodeType":"126","messageId":"127","endLine":28,"endColumn":24},{"ruleId":"124","severity":1,"message":"169","line":28,"column":34,"nodeType":"126","messageId":"127","endLine":28,"endColumn":37},{"ruleId":"124","severity":1,"message":"140","line":29,"column":10,"nodeType":"126","messageId":"127","endLine":29,"endColumn":15},{"ruleId":"124","severity":1,"message":"136","line":30,"column":10,"nodeType":"126","messageId":"127","endLine":30,"endColumn":14},{"ruleId":"124","severity":1,"message":"141","line":44,"column":7,"nodeType":"126","messageId":"127","endLine":44,"endColumn":11},{"ruleId":"124","severity":1,"message":"170","line":54,"column":7,"nodeType":"126","messageId":"127","endLine":54,"endColumn":14},{"ruleId":"124","severity":1,"message":"171","line":57,"column":10,"nodeType":"126","messageId":"127","endLine":57,"endColumn":20},{"ruleId":"124","severity":1,"message":"172","line":57,"column":22,"nodeType":"126","messageId":"127","endLine":57,"endColumn":35},{"ruleId":"124","severity":1,"message":"142","line":60,"column":22,"nodeType":"126","messageId":"127","endLine":60,"endColumn":35},{"ruleId":"128","severity":1,"message":"148","line":80,"column":6,"nodeType":"130","endLine":80,"endColumn":31,"suggestions":"173"},{"ruleId":"124","severity":1,"message":"174","line":20,"column":9,"nodeType":"126","messageId":"127","endLine":20,"endColumn":16},"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'userData.emailVerified'. Either include it or remove the dependency array.","ArrayExpression",["175"],"'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'CreditCard' is defined but never used.","'Link' is defined but never used.","'PaymentFragment' is defined but never used.","'Button' is defined but never used.","'Avatar' is defined but never used.","'store' is defined but never used.","'rows' is assigned a value but never used.","'setCategories' is assigned a value but never used.","'fileUrl' is assigned a value but never used.","'setFileUrl' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setTotalSell' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'page' and 'rowsPerPage'. Either include them or remove the dependency array.",["176"],"'data' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Autocomplete' is defined but never used.","'loadingData' is assigned a value but never used.",["177"],"'makeStyles' is defined but never used.","'MobileStepper' is defined but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'KeyboardArrowLeft' is defined but never used.","'KeyboardArrowRight' is defined but never used.","'userData' is assigned a value but never used.",["178"],"'IconButton' is defined but never used.","'DialogContentText' is defined but never used.","'Create' is defined but never used.","'Delete' is defined but never used.","'Add' is defined but never used.","'product' is assigned a value but never used.","'inputValue' is assigned a value but never used.","'setInputValue' is assigned a value but never used.",["179"],"'classes' is assigned a value but never used.",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"180","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [history, userData.emailVerified]",{"range":"189","text":"190"},"Update the dependencies array to be: [page, productCategory, products, rowsPerPage]",{"range":"191","text":"192"},"Update the dependencies array to be: [category, categories, rowsPerPage, page]",{"range":"193","text":"194"},{"range":"195","text":"190"},"Update the dependencies array to be: [productCategory, orders, rowsPerPage, page]",{"range":"196","text":"197"},[971,980],"[history, userData.emailVerified]",[3585,3611],"[page, productCategory, products, rowsPerPage]",[2803,2824],"[category, categories, rowsPerPage, page]",[1048,1057],[2518,2543],"[productCategory, orders, rowsPerPage, page]"]